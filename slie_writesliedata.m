function slie_writesliedata(outfile, data, timelist, varargin)
% Function to write comma separated ASCII files for various data arrays
% generated by sliealyzer
%
% USAGE
%        slie_writesliedata(outfile, data, timelist)
%        slie_writesliedata(__, 'datafmt', datafmt)
%        slie_writesliedata(__, 'veclabels', veclabels)
%
% INPUTS
%     outfile : string specifying full path and filename for ASCII file
%               to which data are to be written
%        data : Nvec-by-n array of values to be output, where n
%               could be the number of SLIEs or months for which there
%               columns in the array
%    timelist : Either: 
%               - m-by-1 list of date numbers corresponing to each column
%               - or the string "Months" specifying monthly data
%     datafmt : string specifying the data format to be used
%               e.g., "%f" for numeric data, or "s" for string data
%               Default: '%5.1f'
%   veclabels : Nvec-by-1 cell array containing labels for selected vectors
%               (empty elements go unlabelled)
%
%
% OUTPUT
%    A comma-separated ASCII file specified by outfile
%
%
% Andy Mahoney - October 2023
%
% ------------------------------------------------------------------------

% Check for variable arguments in function call
Nvararg = numel(varargin);
a = 1;
while a <= Nvararg
    switch varargin{a}
        case 'datafmt'
            datafmt = varargin{a+1};
            a = a + 2;
        case 'veclabels'
            veclabels = varargin{a+1};
            a = a + 2;
        otherwise
            disp(['Argument not recognized: ' varargin{a}]);
            a = a + 1;
    end
end

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Set default values for arguments not specified in function call

% Create blank list of vector labels if none specified
if ~exist('veclabels','var')
  veclabels = cell(Nvecs,1);
end

% Define data line format string
if ~exist('datafmt','var')
  datafmt = '%5.1f';
end

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Determine size of data
% ** Note: Nslies refers to the number of columns, but each column
%          does not necessarily need to correspond to a SLIE. The 
%          columns could contain monthly data, for example
datasz = size(data);
Nslies = datasz(2);
Nvecs = datasz(1);

% See what we're dealing with for the time information
if strcmp(timelist(1), 'Months')
    timelist = ['Jan'; 'Feb'; 'Mar'; 'Apr'; 'May'; 'Jun', ; ...
                'Jul'; 'Aug'; 'Sep'; 'Oct'; 'Nov'; 'Dec'];
end


% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% === Start writing to file ===
% Open file for writing
outfid = fopen(outfile, 'wt');

% Write headline to file
header_fstring = [',' repmat(',%s',1,Nslies) '\n'];
fprintf(outfid, header_fstring, timelist{:});

data_fstring = ['%20s,%4d' repmat([',' datafmt], 1, Nslies) '\n'];

% Write data to file in specified format
if ~iscell(data)
    for v=1:Nvecs
        fprintf(outfid, data_fstring, veclabels{v}, v, data(v,:));    
    end
else
    for v=1:Nvecs
        fprintf(outfid, data_fstring, veclabels{v}, v, data{v,:});    
    end
end

% Close output file and tell the user
fclose(outfid);
disp(['Written: ', outfile]);

end

